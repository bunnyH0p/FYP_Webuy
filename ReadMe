# Project title: Group Buy

#Project description: 

This project aims at developing a mobile ecommerce application based on the
concept of group buy. Each item listed in this platform has a discounted price
and an associated minimum number to be reached. The shoppers can browse
(and search) the items for sale in this platform. Once a shopper has the interest
to buy an item, he can either add it to the watch list, or join an existing group
to buy this item. The shopper can also start a new group for the item. Once a
new group is created, all users who have the same item in their watch list will
be notified and be invited to join the group to buy. Once the minimum group
size is reached, transaction will be completed for all members in that group at
the discounted price. A shopper has the option to leave group before the
minimum number is reached.

#Product Name : Webuy

#How to run the Backend of the app: 
1.In the Backend folder, open the config folder and look for a file called "development.json". 
2.Change the ip address to your current ip address with a opening port of your choice.
3.Run "node index.js" on your terminal. 
4."Server started on port 9003..." message will be shown if you have successfully running the Backend.
5.Check the server is running, type "localhost:(port number)/api/listings" in your browser to view the details of listings.
 
#How to run the WeBuy app:
1.In the WeBuy folder, run "expo start" or "npm start" on your terminal.
2.Upon successfully running the expo, a QR Code will be shown in your terminal.
3.Metro Bundler will pop out in your web browser.

#How to run WeBuy App on your phone:
1.Download Expo in the App store or Play store.
2.Scan the QR code appeared in your terminal or on the Metro Bundler web page.
3.If you are unable to scan the QR code, you can simply copy the link above the QR code to the Expo app.

#Descriptions of each folder and file:
    WeBuy folder consist of:
        1.App.js
        2.AuthNavigator
        3.auth
        4.api
        5.componentJp
        6.components
        7.exampleJp
        (the rest are expo default packages)


#App.js:
App.js the first file in any React Native app that is the entry point of the app development process. 
Whatever you write inside this file, it will get displayed on the mobile device. 
when the application loads, App.js render an initial initializing component while checking to see if there is a user. 
If there is a user, the app component "ListingsScreen" in tab-based navigation will be rendered or else the auth component
"loginScreen" in the stack-based navigation will be rendered.

#AuthNavigator:
In AuthNavigator folder, AppNavigator.js is tab-based navigation (the bottom tabs) used to swtich between different stack-based 
navigation. There are 5 stack-based navigation and they are FeedNavigator, GroupNavigator, AccountNavigator and WatchListNavigator.
Each of the stack-based navigator provides a way for the app to transition between screens ad manage navigation history.

#exampleJp:
ExampleJp folder contains all the Screens of Our WeBuy app. 
AuthNavigator contains LoginScreen, RegisterScreen.
FeedNavigator contains ListingsScreen,  ListingDetails, PaymentScreen, SearchScreen and AddressScreen.
GroupNavigator contains GroupListsScreen and GroupListDetailsScreen.
WatchListNavigator contains WatchlistScreen and WatchListDetailsScreen
AccountNavigator contains AccountScreen, MessagesScreen, MyListingsScreen, OrderDetailsScreen, AboutUsScreen and MyListingsDetails.

#api
In the api folder, each api file is used to send a HTTP request to our Backend to either retrieve or modify the data.
Each api file is corresponding to each type of endpoint. When api is called, the server will interact with the app only
at the api layer before passing the data to the front-end of the app.

#auth:
Components in the folder is used to authenticate user with a authentication token. This is for security purposes.


#componentJp & components:
These folder contains reusable components such as buttons, TextInput, Text and many other components.

    #config
    This folder is for the color theme of our app.

    #form
    This folder contains the reusable components for form submission in LoginScreen,RegisterScreen,AddressScreen
    ListingEditScreen and PaymentScreen

    #hook
    Components in this folder are reusable hooks to render api calls.



    


